# -*-coding:UTF-8-*-
# import pyodbc
import psycopg2

# mydb = pyodbc.connect('Driver={SQL Server};'
#                       'Server=CreditDB.mssql.somee.com;'
#                       'Integrated_Security=false;'
#                       'Database=CreditDB;'
#                       'Trusted_Connection=no;'
#                       'UID=Flubber_SQLLogin_1;'
#                       'PWD=l2hwi6n8ic;')
import Constant_File

listpersonChallenge = ['zhuranskyi', 'mihailik_panchuk', 'a111111178012648', 'J7AD3EAKTQS']
mydb = psycopg2.connect(Constant_File.DB_URI)
DebtLimitValue = 10000
TimeLimitMessageMinute = 5

def CreateTable():
    mycursor = mydb.cursor()
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS CHATS (
            ChatId BIGINT PRIMARY KEY,
            CountUsers BIGINT,
            DebtLimitValue FLOAT NOT NULL, 
            TimeLimitMessageMinute BIGINT NOT NULL 
            ); ''')
    mydb.commit()
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS PERSONS (
            PersonId BIGINT PRIMARY KEY,
            ListChatId VARCHAR(255) NOT NULL,
            Name VARCHAR(255) NOT NULL,
            UserName VARCHAR(255) NOT NULL 
            ); ''')
    mydb.commit()
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS CHARITY (
            PersonId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            UserName VARCHAR(255) NOT NULL
            ); ''')
    mydb.commit()
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS DEBTS (
            DebtId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            DebtValue FLOAT NOT NULL,
            PersonId BIGINT,
            ChatId BIGINT,
            PayerUserName VARCHAR(255) NOT NULL,
            CONSTRAINT FK_PersonDebt1 FOREIGN KEY (PersonId) REFERENCES PERSONS(PersonId),
            CONSTRAINT FK_PersonDebt2 FOREIGN KEY (ChatId) REFERENCES CHATS(ChatId) 
            ); ''')
    mydb.commit()
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS CARDS (
            CardId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            CardValue VARCHAR(255) NOT NULL,
            PersonId BIGINT,
            ChatId BIGINT,
            CONSTRAINT FK_PersonCard1 FOREIGN KEY (PersonId) REFERENCES PERSONS(PersonId),
            CONSTRAINT FK_PersonCard2 FOREIGN KEY (ChatId) REFERENCES CHATS(ChatId) 
            ); ''')
    mycursor.execute('''
        CREATE TABLE IF NOT EXISTS OBSCENELANGUAGE (
            MatId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            MatValue VARCHAR(255) NOT NULL 
            ); ''')
    mycursor.execute('''
            CREATE TABLE IF NOT EXISTS VOTINGS (
            VoteId INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            ChatId BIGINT NOT NULL,
            MessageId BIGINT NOT NULL,
            CountYes BIGINT NOT NULL,
            CountNo BIGINT NOT NULL,
            Purpose VARCHAR(255) NOT NULL,
            listVoters VARCHAR(1024) NOT NULL,
            whoCreateVoting VARCHAR(255) NOT NULL
            ); ''')
    mydb.commit()
    mydb.commit()
    mycursor.close()


def AddChatId(PersonId, ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT ListChatId
    FROM PERSONS
    WHERE PersonId = {PersonId}''')
    ListChatId = mycursor.fetchone()[0] + str(ChatId) + ';'
    print(ListChatId)
    query = f'''UPDATE PERSONS
    Set ListChatId = '{ListChatId}' WHERE PersonId = {PersonId} '''
    mycursor.execute(query)
    mydb.commit()
    mycursor.execute(f'''SELECT CountUsers
    FROM CHATS
    WHERE ChatId = {ChatId}''')
    CountUsers = mycursor.fetchone()[0] + 1
    print(CountUsers)
    print(ListChatId)
    mycursor.execute(f'''UPDATE CHATS
    Set CountUsers = {CountUsers}
    WHERE ChatId = {ChatId} ''')
    mydb.commit()
    mycursor.close()


def IfChatExists(PersonId, ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        SELECT * FROM PERSONS WHERE PersonId = {PersonId}
    ''')
    StringChatId = str(mycursor.fetchone()[1])
    ListChatId = StringChatId.split(';')
    for el in ListChatId:
        if str(ChatId) == el:
            mycursor.close()
            return True
    mycursor.close()
    return False


def CheckUser(PersonId, ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM PERSONS Where PersonId = {PersonId}
    ''')
    if mycursor.fetchone()[0] == 1:
        if IfChatExists(PersonId, ChatId):
            return True
    return False


def getCountOfActiveUsers(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT CountUsers FROM CHATS Where ChatId = {ChatId}
    ''')
    return mycursor.fetchone()[0]


def CheckUserByUserName(UserName, ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM PERSONS WHERE UserName = N'{UserName}' ''')
    if mycursor.fetchone()[0] == 1:
        PersonId = getUserIdByUserName(UserName)
        if IfChatExists(PersonId, ChatId):
            return True
    return False


def CheckCardDoubleInfo(PersonId, ChatId, CardValues):
    if CheckCard(PersonId, ChatId):
        mycursor = mydb.cursor()
        mycursor.execute(f'''SELECT * FROM CARDS Where PersonId = {PersonId} AND ChatId = {ChatId}''')
        info = str(mycursor.fetchone()[1])
        if CardValues in info:
            return True
        else:
            return False
    return False


def CheckCardPersonsDoubleInfo(PersonId, ChatId, CardValues):
    if CheckCard(PersonId, ChatId):
        mycursor = mydb.cursor()
        mycursor.execute(f'''SELECT * FROM CARDS Where ChatId = {ChatId}''')
        for row in mycursor.fetchall():
            # print(row)
            if CardValues in row[1]:
                if not row[2] == PersonId:
                    return True
    return False


def CheckCard(PersonId, ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM CARDS Where PersonId = {PersonId} AND ChatId = {ChatId}
    ''')
    if mycursor.fetchone()[0] == 1:
        if IfChatExists(PersonId, ChatId):
            return True
    return False


def GetUsersFromCurrChat():
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        SELECT * FROM PERSONS
    ''')
    return mycursor.fetchall()


def GetChats(PersonId, ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        SELECT * FROM PERSONS WHERE PersonId = {PersonId}'
    ''')
    StringChatId = str(mycursor[1])
    ListChatId = StringChatId.split(';')
    return ListChatId


def GetCard(PersonId,ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        SELECT * FROM CARDS WHERE PersonId = {PersonId} AND ChatId = {ChatId}
    ''')
    info = mycursor.fetchone()
    print(info)
    if info is None:
        return "Не додано"
    else:
        if info[1] == "":
            return "Не додано"
        else:
            return info[1]


def CheckLoneLinnes(ChatId):
    CreateChat(ChatId)
    mycursor = mydb.cursor()
    mycursor.execute(f'''
           SELECT CountUsers FROM CHATS WHERE ChatId = {ChatId}
       ''')
    CountUsers = mycursor.fetchone()[0]
    print(CountUsers)
    if CountUsers == 1:
        return "Ти скидаєшся сам з собою, знайди собі друзів"
    elif CountUsers == 0:
        return 'Для початку увійдіть в гільдію: команда /entertheparty'
    return False


def AddDebtForAll(PersonId,ChatId,DebtValue):
    result = ""
    mycursor = mydb.cursor()
    mycursor.execute(f'''
           SELECT CountUsers FROM CHATS WHERE ChatId = {ChatId}
       ''')
    CountUsers = mycursor.fetchone()[0]
    print("base: " + str(CountUsers))
    mycursor.execute(f'''
                    SELECT * FROM PERSONS
                ''')
    list = mycursor.fetchall()
    for row in list:
        if CheckUser(row[0], ChatId) and row[0] == PersonId:
            UserNamePayer = row[3]
            print("UserName: " + UserNamePayer)
            break
    for row in list:
        if CheckUser(row[0], ChatId) and not row[0] == PersonId:
            print("UserName: " + UserNamePayer)
            print("CountUsers: " + str(CountUsers))
            result = AddDebt(UserNamePayer, row[0], ChatId, DebtValue / CountUsers)
            if "Перевищено ліміт боргу: " in result:
                return result
        else:
            continue
    return result


def AddDebtForGroupNotAll(PersonId,ChatId,DebtValue,listPerson):
    result = ""
    mycursor = mydb.cursor()
    mycursor.execute(f'''
                    SELECT * FROM PERSONS
                ''')
    list = mycursor.fetchall()
    for row in list:
        if CheckUser(row[0], ChatId) and row[0] == PersonId:
            UserNamePayer = row[3]
            print("UserName: " + UserNamePayer)
            break
    for row in listPerson:
        if not getUserIdByUserName(row) == PersonId:
            print("row: " + row)
            result = AddDebt(UserNamePayer, getUserIdByUserName(row), ChatId, float(DebtValue) / float(len(listPerson)))
            if "Перевищено ліміт боргу: " in result:
                return result
    return result


def AddDebtForOne(PayerId,ChatId,DebtValue,PersonId):
    result = ""
    DebtValue = str(DebtValue).replace(",",".")
    mycursor = mydb.cursor()
    mycursor.execute(f'''
                    SELECT * FROM PERSONS
                ''')
    list = mycursor.fetchall()
    for row in list:
        if CheckUser(PayerId, ChatId) and row[0] == PayerId:
            UserNamePayer = row[3]
            break
    if not PayerId == PersonId:
        print("PersonId: " + str(PersonId))
        print(DebtValue)
        result = AddDebt(UserNamePayer, PersonId, ChatId, float(DebtValue))
        if "Перевищено ліміт боргу: " in result:
            return result
    return result


def AddDebt(PayerUserName,PersonId,ChatId,DebtValue):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT COUNT(*) FROM DEBTS WHERE ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}' ''')
    count = mycursor.fetchone()[0]
    DebtLimitValue = getDebtLimitValue(ChatId)
    if count == 0:
        if DebtValue <= DebtLimitValue:
            insert_query_debt = f'''INSERT INTO DEBTS (DebtValue, PersonId , ChatId, PayerUserName)
            SELECT {DebtValue}, {PersonId}, {ChatId}, '{PayerUserName}'
            WHERE NOT EXISTS ( SELECT * FROM DEBTS WHERE ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}') '''
            mycursor.execute(insert_query_debt)
            mydb.commit()
        else:
            return f"Перевищено ліміт боргу: {str(DebtValue)} грн для користувача @{getUserNameByUserId(PersonId)} при максимальному значенні для однієї людини - {str(DebtLimitValue)} грн"
    else:
        mycursor.execute(
            f'''SELECT DebtValue FROM DEBTS WHERE PersonId = {PersonId} AND ChatId = {ChatId} AND PayerUserName = N'{PayerUserName}' ''')
        DebtValue = mycursor.fetchone()[0] + float(DebtValue)
        if DebtValue <= DebtLimitValue:
            mycursor.execute(f'''UPDATE DEBTS
            SET DebtValue = {DebtValue}
            WHERE PersonId = {PersonId} AND ChatId = {ChatId} AND PayerUserName = N'{PayerUserName}' ''')
        else:
            return f"Перевищено ліміт боргу: {str(DebtValue)} грн для користувача @{getUserNameByUserId(PersonId)} при максимальному значенні для однієї людини {str(DebtLimitValue)} грн"
    mydb.commit()
    mycursor.close()
    return "Операцію успішно виконано!"


def GetDebt(PersonId,ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT * FROM DEBTS WHERE ChatId = {ChatId} AND PersonId = {PersonId}''')
    debtList = mycursor.fetchall()
    debtInfo = ""
    for row in debtList:
        debtInfo += str(round(row[1], 2)) + " грн" + " Кому: " + '@' + str(row[4]) + '\n'
    mycursor.close()
    return debtInfo


def CheckMinusDebt(PersonId, ChatId, DebtValue, PayerUserName):
        mycursor = mydb.cursor()
        mycursor.execute(f'''SELECT * FROM DEBTS Where ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}' ''')
        debt = mycursor.fetchone()[1]
        if debt - DebtValue < 0:
            return True
        return False


def CheckIfZeroDebt(PersonId, ChatId, PayerUserName):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT * FROM DEBTS Where ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}' ''')
    debt = mycursor.fetchone()[1]
    if debt == 0:
        return True
    return False


def CheckMinusDebtByAdding(PersonId, ChatId, DebtValue, PayerUserName):
        mycursor = mydb.cursor()
        mycursor.execute(
            f'''SELECT * FROM DEBTS Where ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}' ''')
        debt = mycursor.fetchone()[1]
        if debt + DebtValue < 0:
            return True
        return False


def RemoveExactDebt(PersonId, ChatId, DebtValueCurr, PayerUserName):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''UPDATE DEBTS
        SET DebtValue = DebtValue - {DebtValueCurr}
        Where ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}' ''')
    mydb.commit()
    mycursor.close()


def RemoveDebt(PersonId,ChatId,PayerUserName):
    mycursor = mydb.cursor()
    mycursor.execute(f'''UPDATE DEBTS
    SET DebtValue = {0}
    WHERE PersonId = {PersonId} AND ChatId = {ChatId} AND PayerUserName = N'{PayerUserName}' ''')
    mydb.commit()
    mycursor.close()



def getUserIdByUserName(UserName):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT PersonId FROM PERSONS WHERE UserName = N'{UserName}' ''')
    userId = mycursor.fetchone()[0]
    print(userId)
    return userId


def getUserNameByUserId(userId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT UserName FROM PERSONS WHERE PersonId = {userId} ''')
    userName = mycursor.fetchone()[0]
    print(userName)
    return userName


def getDebtLimitValue(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT DebtLimitValue FROM CHATS WHERE ChatId = {ChatId} ''')
    DebtLimitValue = mycursor.fetchone()[0]
    mycursor.close()
    return DebtLimitValue


def getTimeLimitValue(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT TimeLimitMessageMinute FROM CHATS WHERE ChatId = {ChatId} ''')
    TimeLimitValue = mycursor.fetchone()[0]
    mycursor.close()
    return TimeLimitValue


def setNewDebtLimitValue(ChatId, NewDebtLimitValue):
    mycursor = mydb.cursor()
    mycursor.execute(f'''UPDATE CHATS
    SET DebtLimitValue = {NewDebtLimitValue}
    WHERE ChatId = {ChatId} ''')
    mydb.commit()
    mycursor.close()


def setNewTimeLimitValue(ChatId, NewTimeLimitValue):
    mycursor = mydb.cursor()
    mycursor.execute(f'''UPDATE CHATS
    SET TimeLimitMessageMinute = {NewTimeLimitValue}
    WHERE ChatId = {ChatId} ''')
    mydb.commit()
    mycursor.close()


def checkIfPersonHaveDebtFromPayer(PersonUserName, ChatId, PayerUserName):
    mycursor = mydb.cursor()
    if CheckUserByUserName(PersonUserName, ChatId):
        PersonId = getUserIdByUserName(PersonUserName)
        mycursor.execute(
            f'''SELECT COUNT(*) FROM DEBTS Where ChatId = {ChatId} AND PersonId = {PersonId} AND PayerUserName = N'{PayerUserName}' ''')
        countOfExistance = mycursor.fetchone()[0]
        if countOfExistance == 1:
            return True
    return False


def CreateChat(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        INSERT INTO CHATS (ChatId, CountUsers, DebtLimitValue, TimeLimitMessageMinute)
        SELECT {ChatId}, {0}, {DebtLimitValue}, {TimeLimitMessageMinute}
        WHERE NOT EXISTS ( SELECT * FROM CHATS WHERE ChatId = {ChatId}) ''')
    mydb.commit()
    mycursor.close()


def CreateVoting(ChatId, purposenumber, username):
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        INSERT INTO VOTINGS (ChatId, MessageId, CountYes, CountNo, Purpose, listVoters, whoCreateVoting)
        SELECT {ChatId}, {0}, {0}, {0}, {purposenumber}, '', '{username}' 
        WHERE NOT EXISTS ( SELECT * FROM VOTINGS WHERE ChatId = {ChatId} ) ''')
    mydb.commit()
    mycursor.close()


def CheckIfChatHaveVoting(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT COUNT(*) FROM VOTINGS WHERE ChatId = {ChatId}''')
    if mycursor.fetchone()[0] == 1:
        return True
    return False


def getVoteListByChatId(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT listVoters FROM VOTINGS WHERE ChatId = {ChatId}''')
    return mycursor.fetchone()[0]


def getVotesYesByChatId(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT CountYes FROM VOTINGS WHERE ChatId = {ChatId}''')
    return mycursor.fetchone()[0]


def getVotesNoByChatId(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT CountNo FROM VOTINGS WHERE ChatId = {ChatId}''')
    return mycursor.fetchone()[0]


def addYesVote(voterId, ChatId):
    mycursor = mydb.cursor()
    expression = getVoteListByChatId(ChatId) + str(voterId) + ";"
    vote = getVotesYesByChatId(ChatId) + 1
    mycursor.execute(f'''UPDATE Votings
    SET listVoters = N'{expression}',
    CountYes = {vote}
    WHERE ChatId = {ChatId} ''')
    mydb.commit()
    mycursor.close()


def addNoVote(voterId, ChatId):
    mycursor = mydb.cursor()
    expression = getVoteListByChatId(ChatId) + str(voterId) + ";"
    vote = getVotesNoByChatId(ChatId) + 1
    mycursor.execute(f'''UPDATE Votings
    SET listVoters = N'{expression}',
    CountNo = {vote}
    WHERE ChatId = {ChatId} ''')
    mydb.commit()
    mycursor.close()


def checkIfPersonVotes(userId,ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''SELECT listVoters FROM VOTINGS WHERE ChatId = {ChatId} ''')
    listVoters = mycursor.fetchone()[0]
    votesData = str(listVoters).split(";")
    for row in votesData:
        if str(userId) == row:
            print("Have a vote")
            return True
    print("Don't have a vote")
    return False


def InsertMessageId(ChatId, MessageId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''UPDATE VOTINGS SET MessageId = {MessageId} WHERE ChatId = {ChatId}''')
    mydb.commit()
    mycursor.close()


def getMessageChatId(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT MessageId FROM VOTINGS WHERE ChatId = {ChatId}''')
    return mycursor.fetchone()[0]


def getPurposeByChatId(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT Purpose FROM VOTINGS WHERE ChatId = {ChatId}''')
    return mycursor.fetchone()[0]


def getCreatorByChatId(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT whoCreateVoting FROM VOTINGS WHERE ChatId = {ChatId}''')
    return mycursor.fetchone()[0]


def deleteVoting(ChatId):
    mycursor = mydb.cursor()
    mycursor.execute(f'''DELETE FROM VOTINGS WHERE ChatId = {ChatId}''')
    mydb.commit()
    mycursor.close()


def DeleteCards(message):
    mycursor = mydb.cursor()
    mycursor.execute(f'''UPDATE CARDS SET CardValue = '' WHERE PersonId = {str(message.from_user.id)} AND ChatId = {str(message.chat.id)}''')
    mydb.commit()
    mycursor.close()


def AddCard(ChatId,PersonId,CardValues):
        mycursor = mydb.cursor()
        mycursor.execute(f'''SELECT COUNT(*) FROM CARDS WHERE ChatId = {ChatId} AND PersonId = {PersonId}''')
        backslach = '\n'
        if mycursor.fetchone()[0] == 1:
            mycursor.execute(f'''SELECT CardValue FROM CARDS WHERE PersonId = {PersonId} AND ChatId = {ChatId}''')
            CardValue = mycursor.fetchone()[0] + backslach + CardValues
            mycursor.execute(f'''UPDATE CARDS
            SET CardValue = '{CardValue}'
            WHERE PersonId = {PersonId} AND ChatId = {ChatId}''')
            mydb.commit()
        else:
            insert_query_card = f'''
                INSERT INTO CARDS (CardValue,PersonId,ChatId)
                SELECT '{backslach}{CardValues}',{PersonId},{ChatId}
                WHERE NOT EXISTS ( SELECT * FROM CARDS WHERE ChatId = {ChatId} AND PersonId = {PersonId}) '''
            mycursor.execute(insert_query_card)
            mydb.commit()
        mycursor.close()


def InsertData(ChatId, PersonId, FullName, UserName):
    CreateChat(ChatId)
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        INSERT INTO PERSONS (PersonId, ListChatId, Name, UserName)
        SELECT {PersonId},'',N'{FullName}',N'{UserName}'
        WHERE
         NOT EXISTS ( SELECT * FROM PERSONS WHERE PersonId = {PersonId}) ''')
    mydb.commit()
    # insert_query_debt = f'''
    #     IF NOT EXISTS ( SELECT * FROM DEBTS WHERE PersonId = {PersonId} AND ChatId = {ChatId})
    #         INSERT INTO DEBTS (DebtValue, PersonId , ChatId, PayerUserName)
    #         VALUES (?,?,?,?);'''
    # values_debt = (0, PersonId, ChatId, '')
    # mycursor.execute(insert_query_debt, values_debt)
    # mydb.commit()
    if not IfChatExists(PersonId, ChatId):
        AddChatId(PersonId,ChatId)
    mycursor.close()


def ShowData(message):
    users = ""
    ListChatId = []
    PersonId = message.from_user.id
    ChatId = message.chat.id
    mycursor = mydb.cursor()
    mycursor.execute(f'''
        INSERT INTO CHATS (ChatId, CountUsers, DebtLimitValue, TimeLimitMessageMinute)
        SELECT {ChatId}, {0}, {DebtLimitValue}, {TimeLimitMessageMinute}
    WHERE 
        NOT EXISTS ( SELECT * FROM CHATS WHERE ChatId = {ChatId}) ''')
    mydb.commit()
    for row in GetUsersFromCurrChat():
        if IfChatExists(row[0],ChatId):
            users += "Шо за мужик : @"
            users += str(row[3])
            print(str(row[3]) + str(row[0]))
            users += "\n"
            users += "Реквізити: "
            users += str(GetCard(row[0],ChatId))
            users += "\n"
            users += "|| Борг: "
            users += str(GetDebt(row[0],ChatId))
            users += "\n"
            users += "\n"
            # print(row)
    # print(users)
    if users == "":
        users = "Наразі учасників ще немає"
    mycursor.close()
    return users

def ShowChats():
    mycursor = mydb.cursor()
    mycursor.execute('''SELECT * FROM CHATS''')
    for row in mycursor:
        print(row)
    mydb.commit()
    mycursor.close()

def DropTable():
    mycursor = mydb.cursor()
    mycursor.execute('''DROP TABLE DEBTS''')
    mycursor.execute('''DROP TABLE CARDS''')
    mycursor.execute('''DROP TABLE PERSONS''')
    mycursor.execute('''DROP TABLE CHATS''')
    mycursor.execute('''DROP TABLE VOTINGS''')
    mycursor.execute('''DROP TABLE OBSCENELANGUAGE''')
    mydb.commit()
    mycursor.close()


def InsertDeletedData():
    backslach = "\n"
    mycursor = mydb.cursor()
    mycursor.execute(f'''
            INSERT INTO CHATS (ChatId, CountUsers, DebtLimitValue, TimeLimitMessageMinute)
            SELECT {-792145823}, {3}, {DebtLimitValue}, {TimeLimitMessageMinute}
        WHERE 
            NOT EXISTS ( SELECT * FROM CHATS WHERE ChatId = {-792145823}) ''')
    mydb.commit()
    mycursor.execute(f'''
            INSERT INTO CHATS (ChatId, CountUsers, DebtLimitValue, TimeLimitMessageMinute)
            SELECT {-739249390}, {2}, {DebtLimitValue}, {TimeLimitMessageMinute}
        WHERE 
            NOT EXISTS ( SELECT * FROM CHATS WHERE ChatId = {-739249390}) ''')
    mydb.commit()
    mycursor.execute(f'''
        INSERT INTO PERSONS (PersonId, ListChatId, Name, UserName)
        SELECT {256266717},N'-792145823;-739249390;',N'Дмитро Журанський Вікторович',N'zhuranskyi'
        WHERE
         NOT EXISTS ( SELECT * FROM PERSONS WHERE PersonId = {256266717}) ''')
    mydb.commit()
    mycursor.execute(f'''
        INSERT INTO PERSONS (PersonId, ListChatId, Name, UserName)
        SELECT {1440530013},N'-739249390;',N'Я Не Баранович Максим',N'Sigma_Boy_Cool'
        WHERE
         NOT EXISTS ( SELECT * FROM PERSONS WHERE PersonId = {1440530013}) ''')
    mydb.commit()
    mycursor.execute(f'''
        INSERT INTO PERSONS (PersonId, ListChatId, Name, UserName)
        SELECT {156911032},N'-792145823;',N'Михайлик',N'mihailik_panchuk'
        WHERE
         NOT EXISTS ( SELECT * FROM PERSONS WHERE PersonId = {156911032}) ''')
    mydb.commit()
    mycursor.execute(f'''
        INSERT INTO PERSONS (PersonId, ListChatId, Name, UserName)
        SELECT {399228453},N'-792145823;',N'Maxim',N'Barik_superman'
        WHERE
         NOT EXISTS ( SELECT * FROM PERSONS WHERE PersonId = {399228453}) ''')
    mydb.commit()
    insert_query_card = f'''
        INSERT INTO CARDS (CardValue,PersonId,ChatId)
        SELECT 'Моно: 4441111143499204{backslach}Приват : 5457082256194775',{256266717},{-792145823}
        WHERE NOT EXISTS ( SELECT * FROM CARDS WHERE ChatId = {-792145823} AND PersonId = {256266717}) '''
    mycursor.execute(insert_query_card)
    mydb.commit()
    insert_query_card = f'''
        INSERT INTO CARDS (CardValue,PersonId,ChatId)
        SELECT 'Моно: 4441114448910701{backslach}Приват: 5168755909922433',{156911032},{-792145823}
        WHERE NOT EXISTS ( SELECT * FROM CARDS WHERE ChatId = {-792145823} AND PersonId = {156911032}) '''
    mycursor.execute(insert_query_card)
    mydb.commit()
    insert_query_card = f'''
        INSERT INTO CARDS (CardValue,PersonId,ChatId)
        SELECT 'Моно: 4441114400184550{backslach}Приват: 5457082270294593',{399228453},{-792145823}
        WHERE NOT EXISTS ( SELECT * FROM CARDS WHERE ChatId = {-792145823} AND PersonId = {399228453}) '''
    mycursor.execute(insert_query_card)
    for row in listpersonChallenge:
        insert_query_card = f'''
            INSERT INTO CHARITY (UserName)
            SELECT '{row}'
            WHERE NOT EXISTS ( SELECT * FROM CHARITY WHERE UserName = '{row}' ) '''
        mycursor.execute(insert_query_card)
        mydb.commit()
    mydb.commit()
    mycursor.close()


def checkIfExistsMat(mat):
    matLogical = proccesMatName(mat)
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT COUNT(*) FROM OBSCENELANGUAGE WHERE MatValue = %s''', (matLogical,))
    if mycursor.fetchone()[0] == 1:
        return True
    return False


def GetListPersonCharity():
    mycursor = mydb.cursor()
    mycursor.execute(
        f'''SELECT * FROM CHARITY''')
    listPersonCharity = []
    for row in mycursor.fetchall():
        listPersonCharity.append(row[1])
    print(listPersonCharity)
    return listPersonCharity


def getAllMat():
    mycursor = mydb.cursor()
    listmat = []
    mycursor.execute(
        f'''SELECT * FROM OBSCENELANGUAGE''')
    for row in mycursor.fetchall():
        listmat.append(row[1])
    print(listmat)
    return listmat


def proccesMatName(name):
    completeName = str(name).strip(" ")
    completeName = completeName.lower()
    return completeName


def addMatToDb(message):
    mat = proccesMatName(str(message.text))
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO OBSCENELANGUAGE (MatValue)
    SELECT %s
    WHERE
        NOT EXISTS (SELECT * FROM OBSCENELANGUAGE WHERE MatValue = %s)'''
                     , (mat, mat,))
    mydb.commit()
    mycursor.close()


def removeMatFromDb(message):
    matLogical = proccesMatName(message.text)
    mycursor = mydb.cursor()
    mycursor.execute(f''' DELETE FROM OBSCENELANGUAGE WHERE MatValue = %s''', (matLogical,))
    mydb.commit()
    mycursor.close()


def joinCharity(username):
    mycursor = mydb.cursor()
    mycursor.execute(f'''INSERT INTO CHARITY (UserName)
    SELECT %s
    WHERE
        NOT EXISTS (SELECT * FROM CHARITY WHERE UserName = %s)'''
                     , (username, username,))
    mydb.commit()
    mycursor.close()


def leaveCharity(username):
    mycursor = mydb.cursor()
    mycursor.execute(f''' DELETE FROM CHARITY WHERE UserName = %s''', (username,))
    mydb.commit()
    mycursor.close()